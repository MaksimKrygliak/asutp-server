// controllers/GoogleDriveController.js
import fs from "fs";
import path from "path";
import crypto from "crypto";
import os from "os";
import util from "util";
import { getDriveClient, authorizeOnce } from "../utils/driveService.js";
const readFileAsync = util.promisify(fs.readFile);
const writeFileAsync = util.promisify(fs.writeFile);
const pbkdf2Async = util.promisify(crypto.pbkdf2);
const ROOT_FOLDER_ID = "root";

const tmpFilePath = (prefix = "tmp") => {
  const name = `${prefix}_${Date.now()}_${Math.random()
    .toString(36)
    .slice(2, 8)}`;
  return path.join(os.tmpdir(), name);
};
async function ensureFolderPath(drive, parentId, folders = []) {
  let currentParent = parentId;

  for (const folderName of folders) {
    // –∏—â–µ–º –ø–∞–ø–∫—É —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –ø–æ–¥ —Ç–µ–∫—É—â–∏–º —Ä–æ–¥–∏—Ç–µ–ª–µ–º
    const resp = await drive.files.list({
      q: `'${currentParent}' in parents and name = '${escapeQuery(
        folderName
      )}' and mimeType = 'application/vnd.google-apps.folder' and trashed = false`,
      fields: "files(id, name)",
      pageSize: 10,
      supportsAllDrives: true,
      includeItemsFromAllDrives: true,
    });

    if (resp.data.files && resp.data.files.length > 0) {
      currentParent = resp.data.files[0].id;
      continue;
    }

    // —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É
    const createResp = await drive.files.create({
      requestBody: {
        name: folderName,
        mimeType: "application/vnd.google-apps.folder",
        parents: [currentParent],
      },
      fields: "id, name",
      supportsAllDrives: true,
    });

    currentParent = createResp.data.id;
  }

  return currentParent;
}

function escapeQuery(s) {
  return String(s).replace(/'/g, "\\'");
}

export async function getDriveContent(req, res) {
  try {
    const { drive } = await getDriveClient();

    const parentId = req.query.parentId;

    const response = await drive.files.list({
      q: `'${parentId}' in parents and trashed = false`,
      fields: "files(id, name, mimeType, size, modifiedTime, parents)",
      pageSize: 1000,
      orderBy: "folder,name",
    });

    const files = response.data.files || [];

    return res.json({
      success: true,
      parentId,
      count: files.length,
      files,
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Google Drive:", error);
    return res.status(500).json({
      success: false,
      message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å Google Drive",
      error: error?.message || String(error),
    });
  }
}

export async function downloadDocument(req, res) {
  const fileId = req.params.id;
  if (!fileId) return res.status(400).send("–ù–µ —É–∫–∞–∑–∞–Ω fileId");

  try {
    const { drive } = await getDriveClient(); // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å –∏–º—è/—Ç–∏–ø/size // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)

    const meta = await drive.files.get({
      fileId,
      fields: "id, name, mimeType, size",
      supportsAllDrives: true,
    });

    const fileName = meta.data.name || "download.bin";
    const mimeType = meta.data.mimeType || "application/octet-stream";

    res.setHeader(
      "Content-Disposition",
      `attachment; filename*=UTF-8''${encodeURIComponent(fileName)}`
    );
    res.setHeader("Content-Type", mimeType);
    if (meta.data.size) {
      res.setHeader("Content-Length", meta.data.size);
    } // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–∞ –≤ –≤–∏–¥–µ –ø–æ—Ç–æ–∫–∞ (stream)

    const driveRes = await drive.files.get(
      { fileId, alt: "media", supportsAllDrives: true },
      { responseType: "stream" }
    ); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å Google Drive –≤ –æ—Ç–≤–µ—Ç Express

    driveRes.data.pipe(res); // ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ end/error)
    driveRes.data.on("error", (err) => {
      console.error("Stream error:", err);
      try {
        // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç–≤–µ—Ç.
        // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 500.
        if (!res.headersSent) res.status(500).end("–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö.");
        res.end();
      } catch {}
    });
  } catch (err) {
    console.error("‚ùå downloadDocument error:", err); // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞), // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
    if (!res.headersSent) {
      return res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.");
    }
  }
}

export async function encryptAndUploadDocument(req, res) {
  try {
    const { fileId, relativePath, password, encryptedRootId } = req.body;

    if (!fileId || !relativePath || !password) {
      return res.status(400).json({
        success: false,
        message: "–ù—É–∂–Ω—ã fileId, relativePath –∏ password –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (JSON).",
      });
    }

    const { drive } = await getDriveClient();

    // –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const tmpIn = tmpFilePath("decrypted");
    const tmpOut = tmpFilePath("encrypted");

    // 1) —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª (–û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å - –ø–æ—Ç–æ–∫–æ–≤–∞—è –∑–∞–ø–∏—Å—å)
    await new Promise(async (resolve, reject) => {
      try {
        const r = await drive.files.get(
          { fileId, alt: "media", supportsAllDrives: true },
          { responseType: "stream" }
        );
        const out = fs.createWriteStream(tmpIn);
        r.data.pipe(out);
        r.data.on("end", () => resolve());
        r.data.on("error", (e) => reject(e));
      } catch (e) {
        reject(e);
      }
    });

    // 2) —à–∏—Ñ—Ä—É–µ–º (AES-256-CBC)
    try {
      await encryptFileRNCompatible(tmpIn, tmpOut, password, true);
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ RN-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏:", e);
      throw new Error("Encryption failed");
    }

    // 3) –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:

    // üåü –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–ê–ü–ö–ò: –£–ø—Ä–æ—â–∞–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É targetParentId/parentFolderId

    let parentFolderId = encryptedRootId; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è

    const relFolders = path
      .dirname(relativePath)
      .split(path.sep) // –ò—Å–ø–æ–ª—å–∑—É–µ–º path.sep –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –û–°
      .filter(Boolean)
      .filter((f) => f !== ".");

    if (relFolders.length > 0) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∞–ø–∫–∏, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –∏—Ö, –Ω–∞—á–∏–Ω–∞—è –æ—Ç encryptedRootId,
      // –∏ –ø–æ–ª—É—á–∞–µ–º ID —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏.
      parentFolderId = await ensureFolderPath(
        drive,
        encryptedRootId,
        relFolders
      );
    }

    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    const base = path.basename(relativePath);
    const encryptedName = base.replace(/\.[^/.]+$/, "") + ".encrypted";

    // 4) upload
    const media = {
      mimeType: "application/octet-stream",
      body: fs.createReadStream(tmpOut),
    };

    const uploadResp = await drive.files.create(
      {
        requestBody: {
          name: encryptedName,
          parents: [parentFolderId], // üëà –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ–Ω–µ—á–Ω–æ–π –ø–∞–ø–∫–∏
        },
        media,
        fields: "id, name, parents",
        supportsAllDrives: true,
      },
      {}
    );

    // cleanup
    try {
      fs.unlinkSync(tmpIn);
    } catch {}
    try {
      fs.unlinkSync(tmpOut);
    } catch {}

    return res.json({
      success: true,
      uploaded: uploadResp.data,
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–µ:", err);
    return res.status(500).json({
      success: false,
      message:
        "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏.",
      error: err?.message || String(err),
    });
  }
}

export async function generatePBKDF2KeyBuffer(password, salt) {
  const derived = await pbkdf2Async(password, salt, 5000, 32, "sha512"); 
  const derivedHex = derived.toString("hex");
  return derived; 
}

export async function encryptFileRNCompatible(
  inputPath,
  outputPath,
  password,
  isSingleFile = false
) {
  const fileDataBase64 = await readFileAsync(inputPath, { encoding: "base64" });
  const salt = "single_file_salt";

  const keyBuffer = await generatePBKDF2KeyBuffer(password, salt);

  const ivBuffer = crypto.randomBytes(16);
  const ivHex = ivBuffer.toString("hex");

  const cipher = crypto.createCipheriv("aes-256-cbc", keyBuffer, ivBuffer);
  let encrypted = cipher.update(fileDataBase64);
  encrypted = Buffer.concat([encrypted, cipher.final()]);
  const encryptedBase64 = encrypted.toString("base64");

  const encryptedContent = JSON.stringify({
    encrypted: encryptedBase64,
    iv: ivHex,
    salt: salt,
  });

  await writeFileAsync(outputPath, encryptedContent, "utf8");
}
