import PostModel from "../models/Post.js";
import User from "../models/User.js";
import mongoose from "mongoose";

export const getLastTags = async (req, res) => {
  try {
    const posts = await PostModel.find().limit(5).exec();

    const tags = posts
      .map((obj) => obj.tags)
      .flat()
      .slice(0, 5);

    res.json(tags);
  } catch (err) {
    console.log(err);
    res.status(500).json({
      message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—ç–≥–∏",
    });
  }
};

export const getAll = async (req, res) => {
  try {
    const tag = req.query.tag;
    let query = {};
    if (tag) {
      query.tags = tag;
    }

    const [notes, count] = await Promise.all([
      PostModel.find(query).populate("user").exec(),
      PostModel.countDocuments(query),
    ]);

    res.json({ notes, count });
  } catch (err) {
    console.error(err);
    res.status(500).json({
      message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å–∏",
    });
  }
};

export const getOne = async (req, res) => {
  try {
    const postId = req.params.id;

    PostModel.findOneAndUpdate(
      {
        _id: postId,
      },
      {
        $inc: { viewsCount: 1 },
      },
      {
        returnDocument: "after",
      },
      (err, doc) => {
        if (err) {
          console.log(err);
          return res.status(500).json({
            message: "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—å—é",
          });
        }

        if (!doc) {
          return res.status(404).json({
            message: "–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
          });
        }

        res.json(doc);
      }
    ).populate("user");
  } catch (err) {
    console.log(err);
    res.status(500).json({
      message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å–∏",
    });
  }
};

export const deletePost = async (req, res) => {
  try {
    const postId = req.params.id;
    const post = await PostModel.findByIdAndUpdate(
      postId,
      { isDeleted: true, deletedAt: new Date(), updatedAt: new Date() }, // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã
      { new: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    );

    if (!post) {
      return res.status(404).json({ message: "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω." });
    }
    res.status(200).json({ message: "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π." });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—è–≥–∫–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
  }
};

export const create = async (req, res) => {
  try {
    const { title, text, imageUrl, tags, type, pech, resolved } = req.body;
    const userId = req.userId;

    const postData = {
      title,
      pech,
      text,
      imageUrl,
      tags: tags.split(","),
      user: userId,
      type: type,
      viewedByUsers: viewedByUsers,
    };

    if (type === "–∞–≤–∞—Ä—ñ–π–Ω–∞") {
      postData.resolved = false;
    }
    const doc = new PostModel(postData);
    const post = await doc.save();

    res.json(post);
  } catch (err) {
    console.log(err);
    res.status(500).json({
      message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç—å—é",
    });
  }
};

export const markPostAsViewed = async (req, res) => {
  const { id: postId } = req.params;
  const userId = req.userId; // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤–∏ –º–∞—î—Ç–µ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ middleware
  try {
    const user = await User.findByIdAndUpdate(
      userId,
      { $addToSet: { viewedPosts: postId } }, // –î–æ–¥–∞—î–º–æ ID –ø–æ—Å—Ç–∞ –¥–æ –º–∞—Å–∏–≤—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö –ø–æ—Å—Ç—ñ–≤ (—è–∫—â–æ –π–æ–≥–æ —Ç–∞–º —â–µ –Ω–µ–º–∞—î)
      { new: true }
    );
    if (!user) {
      return res.status(404).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    res.json({ success: true, message: "–ù–æ—Ç–∞—Ç–∫—É –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—É" });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–æ—Å—Ç–∞ —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ–≥–æ:", error);
    res
      .status(500)
      .json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—É" });
  }
};

export const getChanges = async (req, res) => {
  try {
    const since = req.query.since
      ? new Date(req.query.since)
      : console.log("since –Ω–µ –ø–æ–ª—É—á–µ–Ω");
    
    const createdOrUpdatedPosts = await PostModel.find({
      $or: [
        { updatedAt: { $gte: since }, isDeleted: false }, // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏ –Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ
        { createdAt: { $gte: since }, isDeleted: false }, // –í–Ω–æ–≤—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ
      ],
    })
      .populate("user") // –ï—Å–ª–∏ –ø–æ–ª–µ 'user' —ç—Ç–æ ObjectId –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç—è–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      .lean() // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Mongoose-–¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø—Ä–æ—Å—Ç—ã–µ JavaScript-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
      .exec();

    // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤
    const allUserIdsInChanges = new Set();
    createdOrUpdatedPosts.forEach((post) => {
      if (post.user && post.user._id) {
        allUserIdsInChanges.add(post.user._id.toString());
      }
      if (Array.isArray(post.viewedByUsers)) {
        post.viewedByUsers.forEach((userId) => {
          allUserIdsInChanges.add(userId.toString());
        });
      }
    });

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const referencedUsers = await User.find(
      { _id: { $in: Array.from(allUserIdsInChanges) } },
      "fullName" // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ fullName —Ç–∞ _id
    ).lean();

    // --- –ó–∞–ø—Ä–æ—Å –¥–ª—è ID –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –£–î–ê–õ–ï–ù–´ ---
    // –ù–∞–º –Ω—É–∂–Ω—ã _id –ø–æ—Å—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö:
    // a) isDeleted = true (–æ–Ω–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
    // b) deletedAt >= since (–æ–Ω–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞)
    //    –ò–õ–ò updatedAt >= since (–µ—Å–ª–∏ –≤—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ deletedAt, –∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç–µ updatedAt –ø—Ä–∏ isDeleted = true)
    const deletedPostIds = await PostModel.find(
      {
        isDeleted: true,
        deletedAt: { $gte: since }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º deletedAt, –µ—Å–ª–∏ –æ–Ω–æ —É –≤–∞—Å –µ—Å—Ç—å.
        // –ï—Å–ª–∏ –Ω–µ—Ç, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å: updatedAt: { $gte: since }
      },
      "_id"
    ) // –ü—Ä–æ–µ–∫—Ü–∏—è: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ _id
      .lean()
      .exec()
      .then((docs) => docs.map((doc) => doc._id.toString())); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫–∏

    // 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
    const serverCurrentTimestamp = new Date().toISOString();
    // const userData = {
    //   referencedUsers: referencedUsers.
    // }
    // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    res.json({
      createdOrUpdatedPosts,
      deletedPostIds,
      serverCurrentTimestamp,
      referencedUsers,
    });
  } catch (err) {
    console.error("Server: –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ getChanges:", err);
    res.status(500).json({
      message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
      error: err.message, // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    });
  }
};

export const batchCreate = async (req, res) => {
  const userId = req.userId;
  const arrNotes = Array.isArray(req.body) ? req.body : [];
  const postsToInsert = [];
  const validationResults = [];

  if (arrNotes.length === 0) {
    console.log("Batch Create: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—É—Å—Ç–æ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.");
    return res.json([]);
  }
  // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  arrNotes.forEach((itemData, index) => {
    const __localId = itemData?.__localId;

    if (!itemData || typeof itemData !== "object" || !__localId) {
      console.log(
        "Batch Create: –ü—Ä–æ–ø—É—â–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è __localId:",
        itemData
      );
      validationResults.push({
        __localId: __localId || `index-${index}`,
        success: false,
        error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç __localId",
      });
      return;
    }

    try {
      // üî• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ postsToInsert, –∞ –≤ validationResults –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
      postsToInsert.push(itemData);
      validationResults.push({
        __localId: __localId,
        success: null, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º null –∏–ª–∏ undefined, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—â–µ –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω
        error: null,
      });
    } catch (transformError) {
      console.error(
        `Batch Create: –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ ${__localId}:`,
        transformError
      );
      validationResults.push({
        __localId: __localId,
        success: false,
        error: `Data transformation failed: ${transformError.message}`,
      });
    }
  });

  if (postsToInsert.length === 0) {
    console.log(
      "Batch Create: –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    );
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å
    return res.status(200).json({
      successNewDocs: [],
      failedNewDocs: validationResults.filter((r) => !r.success),
    });
  }

  // 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ –≤ MongoDB
  try {
    const insertResult = await PostModel.insertMany(postsToInsert, {
      ordered: false, // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—Å—Ç–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è
    });

    insertResult.forEach((insertedDoc) => {
      const __localId = insertedDoc.__localId;

      if (__localId) {

        // const resultEntry = validationResults.find(
        //   (r) => r.__localId === __localId
        // );
        const resultEntry = validationResults.find((r) => {
          if (insertedDoc.__localId && r.__localId) {
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º ObjectId —Å —Å—Ç—Ä–æ–∫–æ–π —Å –ø–æ–º–æ—â—å—é .equals()
            return insertedDoc.__localId.equals(r.__localId);
          }
          return false;
        });

        if (resultEntry) {
          resultEntry.success = true;
          resultEntry.error = null; // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É "Processing..."
          resultEntry.serverId = insertedDoc._id; // –í–∞–∂–Ω–æ: serverId –æ—Ç MongoDB
          resultEntry.updatedAt = insertedDoc.updatedAt;
        }
      }
    });

    // –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
    const successNewDocs = validationResults
      .filter((r) => r.success)
      .map((r) => ({
        __localId: r.__localId,
        _id: r.serverId,
        updatedAt: r.updatedAt,
      }));

    const failedNewDocs = validationResults
      .filter((r) => !r.success)
      .map((r) => ({
        __localId: r.__localId,
        message: r.error,
      }));

    return res.status(200).json({ successNewDocs, failedNewDocs });
  } catch (error) {
    // –í —Å–ª—É—á–∞–µ MongoBulkWriteError (–µ—Å–ª–∏ ordered: false –∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏),
    // error.insertedDocs –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ, –∞ error.writeErrors - –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ.

    console.error("Batch Create: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–µ:", error);

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ, —á—Ç–æ –µ—â–µ "Processing...", –∫–∞–∫ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Å –æ–±—â–µ–π –æ—à–∏–±–∫–æ–π
    validationResults.forEach((r) => {
      if (r.error === "Processing...") {
        r.success = false;
        r.error = error.message || "Batch insertion failed";
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ *–±—ã–ª–∏* —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã (–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏)
    if (error.insertedDocs && Array.isArray(error.insertedDocs)) {
      error.insertedDocs.forEach((insertedDoc) => {
        const __localId = insertedDoc.__localId;
        if (__localId) {
          const resultEntry = validationResults.find(
            (r) => r.__localId === __localId
          );
          if (resultEntry) {
            resultEntry.success = true;
            resultEntry.error = undefined;
            resultEntry.serverId = insertedDoc._id;
            resultEntry.updatedAt = insertedDoc.updatedAt;
          }
        }
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å –∏–∑-–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö writeErrors
    if (error.writeErrors && Array.isArray(error.writeErrors)) {
      error.writeErrors.forEach((writeError) => {
        const failedItemIndex = writeError.index;
        if (
          failedItemIndex !== undefined &&
          failedItemIndex < postsToInsert.length
        ) {
          const failedItemData = postsToInsert[failedItemIndex];
          const __localId = failedItemData.__localId;
          const resultEntry = validationResults.find(
            (r) => r.__localId === __localId
          );

          if (resultEntry) {
            resultEntry.success = false;
            resultEntry.error = writeError.errmsg || "Insertion failed";
            resultEntry.serverId = undefined;
            resultEntry.updatedAt = undefined;
          }
        }
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    const successNewDocs = validationResults
      .filter((r) => r.success)
      .map((r) => ({
        __localId: r.__localId,
        _id: r.serverId,
        updatedAt: r.updatedAt,
      }));
    const failedNewDocs = validationResults
      .filter((r) => !r.success)
      .map((r) => ({
        __localId: r.__localId,
        message: r.error,
      }));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å failedNewDocs, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –º–æ–≥ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
    // –ò–ª–∏ 207 Multi-Status, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞ —á–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö/–Ω–µ—É–¥–∞—á—É.
    return res.status(200).json({ successNewDocs, failedNewDocs });
  }
};

export const batchUpdatePosts = async (req, res) => {
  const updates = req.body; // –û–∂–∏–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  if (!Array.isArray(updates) || updates.length === 0) {
    return res
      .status(400)
      .json({ message: "Updates must be a non-empty array of post objects." });
  }

  const successUpdates = [];
  const failedUpdates = [];

  for (const postUpdate of updates) {
    const { _id, __localId, ...dataToUpdate } = postUpdate; // _id - —ç—Ç–æ server_id, __localId - —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π ID –∏–∑ Realm

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è _id (server_id)
    if (!_id) {
      failedUpdates.push({
        __localId,
        message: "Missing server_id (_id) for update.",
      });
      continue;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è ObjectId
    if (!mongoose.Types.ObjectId.isValid(_id)) {
      failedUpdates.push({
        __localId,
        _id,
        message: "Invalid server_id (_id) format.",
      });
      continue;
    }

    try {
      const updatedPost = await PostModel.findByIdAndUpdate(
        _id,
        {
          ...dataToUpdate,
          updatedAt: new Date(), // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        },
        { new: true, runValidators: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —Å—Ö–µ–º—ã
      );

      if (updatedPost) {
        successUpdates.push({
          __localId: __localId, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
          _id: updatedPost._id.toString(), // Server ID
          updatedAt: updatedPost.updatedAt,
          // –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        });
      } else {
        failedUpdates.push({
          __localId,
          _id,
          message: "Post not found on server.",
        });
      }
    } catch (error) {
      console.error(`Batch Update: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ ${_id}:`, error);
      failedUpdates.push({
        __localId,
        _id,
        message: error.message || "Server error during update.",
      });
    }
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  if (failedUpdates.length > 0) {
    console.warn(
      `Batch Update: –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏. –£—Å–ø–µ—à–Ω–æ: ${successUpdates.length}, –û—à–∏–±–∫–∏: ${failedUpdates.length}`
    );
    return res.status(207).json({
      // 207 Multi-Status –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞/–Ω–µ—É–¥–∞—á–∏
      message: "Batch update completed with some failures.",
      successUpdates,
      failedUpdates,
    });
  } else {
    console.log(
      `Batch Update: –í—Å–µ ${successUpdates.length} –ø–æ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.`
    );
    return res.status(200).json({
      message: "All posts successfully updated.",
      successUpdates,
    });
  }
};

export const batchDeletePosts = async (req, res) => {
  const { ids } = req.body;

  if (!Array.isArray(ids) || ids.length === 0) {
    return res.status(400).json({ message: "IDs –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –º–∞—Å—Å–∏–≤–æ–º" });
  }

  const successIds = [];
  const failedIds = [];

  const objectIdsToSoftDelete = ids
    .filter((id) => mongoose.Types.ObjectId.isValid(id))
    .map((id) => new mongoose.Types.ObjectId(id));

  if (objectIdsToSoftDelete.length === 0) {
    return res
      .status(400)
      .json({ message: "No valid Object IDs provided for soft deletion." });
  }

  try {
    const result = await PostModel.updateMany(
      {
        _id: { $in: objectIdsToSoftDelete },
        isDeleted: false,
      },
      {
        $set: {
          isDeleted: true,
          deletedAt: new Date(),
          updatedAt: new Date(),
        },
      }
    );

    if (result.modifiedCount > 0) {
      objectIdsToSoftDelete.forEach((id) => successIds.push(id.toString()));
    } else {
      objectIdsToSoftDelete.forEach((id) => failedIds.push(id.toString()));
    }

    if (failedIds.length > 0) {
      return res.status(207).json({
        message:
          "Batch soft deletion completed with some failures (or already deleted).",
        successIds,
        failedIds,
      });
    } else {
      return res.status(200).json({
        success: true,
        message: `Successfully soft deleted ${result.modifiedCount} posts.`,
        successIds,
      });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º –º—è–≥–∫–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤:", error);
    return res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º –º—è–≥–∫–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤." });
  }
};
