// utils/driveService.js
import { google } from "googleapis";

// –¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ ENV
const CLIENT_ID = process.env.GOOGLE_CLIENT_ID;
const CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;
const REDIRECT_URI = process.env.GOOGLE_REDIRECT_URI;
const REFRESH_TOKEN = process.env.GOOGLE_REFRESH_TOKEN; // –ì–ª–∞–≤–Ω—ã–π —Å–µ–∫—Ä–µ—Ç

if (!CLIENT_ID || !CLIENT_SECRET || !REDIRECT_URI) {
  throw new Error(
    "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CLIENT_ID/SECRET/URI."
  );
}

export function createOAuthClient() {
  return new google.auth.OAuth2(CLIENT_ID, CLIENT_SECRET, REDIRECT_URI);
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Drive (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ENV) ===
export async function getDriveClient() {
  const oAuth2Client = createOAuthClient();

  if (!REFRESH_TOKEN) {
    throw new Error(
      "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_REFRESH_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."
    );
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Refresh Token. Google API –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç
  // –Ω–æ–≤—ã–π Access Token –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –∏ –±—É–¥–µ—Ç –µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
  oAuth2Client.setCredentials({ refresh_token: REFRESH_TOKEN });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω,
  // —Ç–∞–∫ –∫–∞–∫ Access Token –Ω–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å, –∞ Refresh Token –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è.

  const drive = google.drive({ version: "v3", auth: oAuth2Client });

  return { drive, auth: oAuth2Client };
}

// === –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –ø–æ –∫–æ–¥—É (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è ENV)
export async function authorizeOnce(code) {
  const oAuth2Client = createOAuthClient();

  const { tokens } = await oAuth2Client.getToken(code);

  if (tokens.refresh_token) {
    // üö® –í–ê–ñ–ù–û: –ë–æ–ª—å—à–µ –ù–ï –°–û–•–†–ê–ù–Ø–ï–ú –í –§–ê–ô–õ. –í—ã–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ ENV.
    console.log("=================================================");
    console.log("‚úÖ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê. –°–ö–û–ü–ò–†–£–ô–¢–ï –≠–¢–û–¢ –¢–û–ö–ï–ù:");
    console.log(`GOOGLE_REFRESH_TOKEN=${tokens.refresh_token}`);
    console.log(
      "–ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä."
    );
    console.log("=================================================");
    return tokens.refresh_token; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  } else {
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Refresh Token.");
  }
}

// === –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç ENV –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞)
export function getAuthUrl() {
  const oAuth2Client = createOAuthClient();

  const scopes = ["https://www.googleapis.com/auth/drive"];
  return oAuth2Client.generateAuthUrl({
    access_type: "offline",
    scope: scopes,
    prompt: "consent",
  });
}

// // utils/driveService.js
// import fs from "fs";
// import path from "path";
// import { google } from "googleapis";

// const __dirname = path.resolve();
// const TOKEN_PATH = path.join(__dirname, "token.json");
// const CREDENTIALS_PATH = path.join(__dirname, "credentials.json");

// export async function getDriveClient() {
//   const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, "utf8"));
//   const { client_secret, client_id, redirect_uris } = credentials.web;

//   const oAuth2Client = new google.auth.OAuth2(
//     client_id,
//     client_secret,
//     redirect_uris[0]
//   );

//   if (fs.existsSync(TOKEN_PATH)) {
//     const token = JSON.parse(fs.readFileSync(TOKEN_PATH, "utf8"));
//     oAuth2Client.setCredentials(token);

//     // üåü –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
//     // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
//     // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ (—Å —Ç–µ–º –∂–µ refresh_token)
//     // –≤ token.json, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è Access Token.
//     oAuth2Client.on("tokens", (tokens) => {
//       if (tokens.refresh_token) {
//         // –ï—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π refresh_token (—á—Ç–æ —Ä–µ–¥–∫–æ), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
//         token.refresh_token = tokens.refresh_token;
//       }
//       token.access_token = tokens.access_token;
//       token.expiry_date = tokens.expiry_date;

//       // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π access_token
//       fs.writeFileSync(TOKEN_PATH, JSON.stringify(token));
//       console.log("üîÑ Access Token —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
//     });
//   } else {
//     throw new Error("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è.");
//   }

//   const drive = google.drive({ version: "v3", auth: oAuth2Client });

//   // üëá –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ drive, –∏ auth
//   return { drive, auth: oAuth2Client };
// }

// // export async function getDriveClient() {
// //   const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, "utf8"));
// //   const { client_secret, client_id, redirect_uris } = credentials.web;

// //   const oAuth2Client = new google.auth.OAuth2(
// //     client_id,
// //     client_secret,
// //     redirect_uris[0]
// //   );

// //   // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
// //   if (fs.existsSync(TOKEN_PATH)) {
// //     const token = JSON.parse(fs.readFileSync(TOKEN_PATH, "utf8"));
// //     oAuth2Client.setCredentials(token);
// //   } else {
// //     throw new Error("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è.");
// //   }

// //   return google.drive({ version: "v3", auth: oAuth2Client });
// // }

// // === –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –ø–æ –∫–æ–¥—É (–∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞)
// export async function authorizeOnce(code) {
//   const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, "utf8"));
//   const { client_secret, client_id, redirect_uris } = credentials.web;
//   const oAuth2Client = new google.auth.OAuth2(
//     client_id,
//     client_secret,
//     redirect_uris[0]
//   );

//   const { tokens } = await oAuth2Client.getToken(code);
//   if (tokens.refresh_token) {
//     // ‚ö†Ô∏è –°–û–•–†–ê–ù–ò–¢–¨ –≠–¢–û–¢ –¢–û–ö–ï–ù –ù–ê–í–°–ï–ì–î–ê –≤ DB –∏–ª–∏ Secure Config!
//     console.log("–ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", tokens.refresh_token);
//   }
//   oAuth2Client.setCredentials(tokens);

//   fs.writeFileSync(TOKEN_PATH, JSON.stringify(tokens));
//   console.log("‚úÖ Token —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ token.json");
// }

// // === –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
// export function getAuthUrl() {
//   const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, "utf8"));
//   const { client_secret, client_id, redirect_uris } = credentials.web;
//   const oAuth2Client = new google.auth.OAuth2(
//     client_id,
//     client_secret,
//     redirect_uris[0]
//   );

//   const scopes = ["https://www.googleapis.com/auth/drive"];
//   return oAuth2Client.generateAuthUrl({
//     access_type: "offline",
//     scope: scopes,
//     prompt: "consent",
//   });
// }
